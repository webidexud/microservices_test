<!DOCTYPE html>
<html lang="es">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>
        <%= title %>
    </title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        teal: '#5ea9a7',
                        dark: '#23322d',
                        gold: '#d6b770'
                    },
                    backgroundImage: {
                        'gradient-dashboard': 'linear-gradient(to bottom, rgba(94,169,167,0.1) 0%, rgba(35,50,45,0.2) 100%)',
                    }
                }
            }
        }
    </script>


    <script src="<%= BASE_URL %>/public/scripts/utils.js"></script>

    <style>
        #pmoSection, #financierosSection {
            transition: all 1.0s ease;
        }
    </style>

</head>

<body class="bg-gradient-dashboard bg-fixed min-h-screen">
    <div class="container mx-auto px-4 py-8">
        <!-- Header -->
        <header class="mb-8">
            <h1 class="text-4xl font-bold text-dark mb-2">Dashboard de Proyectos</h1>
            <div class="w-20 h-1 bg-gold rounded-full"></div>

            <!-- Mensajes de estado de archivos -->
            <% if (showFileWarnings) { %>
                <div class="mb-6 space-y-3" id="fileStatusMessages">
                    <% if (!filesProcessed.pmo) { %>
                        <div
                            class="alert-message bg-orange-100 border-l-4 border-orange-500 text-orange-700 p-4 rounded">
                            <div class="flex items-center">
                                <svg class="h-5 w-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd"
                                        d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z"
                                        clip-rule="evenodd" />
                                </svg>
                                <div>
                                    <p class="font-bold">Archivo PMO no cargado</p>
                                    <p class="text-sm">Los datos financieros pueden estar incompletos sin la información
                                        del archivo PMO.</p>
                                </div>
                            </div>
                        </div>
                        <% } %>

                            <% if (!filesProcessed.financiera) { %>
                                <div
                                    class="alert-message bg-orange-100 border-l-4 border-orange-500 text-orange-700 p-4 rounded">
                                    <div class="flex items-center">
                                        <svg class="h-5 w-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                                            <path fill-rule="evenodd"
                                                d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z"
                                                clip-rule="evenodd" />
                                        </svg>
                                        <div>
                                            <p class="font-bold">Archivo Giros no cargado</p>
                                            <p class="text-sm">Los datos de proyectos pueden estar incompletos sin la
                                                información del archivo Giros.</p>
                                        </div>
                                    </div>
                                </div>
                                <% } %>
                                    <% if (!filesProcessed.ingresos) { %>
                                        <div
                                            class="alert-message bg-orange-100 border-l-4 border-orange-500 text-orange-700 p-4 rounded">
                                            <div class="flex items-center">
                                                <svg class="h-5 w-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                                                    <path fill-rule="evenodd"
                                                        d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z"
                                                        clip-rule="evenodd" />
                                                </svg>
                                                <div>
                                                    <p class="font-bold">Archivo de Ingresos no cargado</p>
                                                    <p class="text-sm">Los datos de proyectos pueden estar incompletos
                                                        sin la
                                                        información del archivo de Ingresos.</p>
                                                </div>
                                            </div>
                                        </div>
                                        <% } %>
                </div>
                <% } %>




        </header>

        <!-- Filtros -->
        <div class="bg-white/80 backdrop-blur-sm rounded-xl shadow-lg border border-teal/20 p-6 mb-8">
            <h2 class="text-xl font-semibold text-dark mb-4 flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-teal" viewBox="0 0 20 20"
                    fill="currentColor">
                    <path fill-rule="evenodd"
                        d="M3 3a1 1 0 011-1h12a1 1 0 011 1v3a1 1 0 01-.293.707L12 11.414V15a1 1 0 01-.293.707l-2 2A1 1 0 018 17v-5.586L3.293 6.707A1 1 0 013 6V3z"
                        clip-rule="evenodd" />
                </svg>
                Filtros
            </h2>
            <div class="grid grid-cols-1 md:grid-cols-5 gap-4">
                <div class="md:col-span-2">
                    <label class="block text-sm font-medium text-dark mb-1">Rango de Años</label>
                    <div class="grid grid-cols-2 gap-2">
                        <select id="filtroAnioDesde"
                            class="w-full p-2 border border-teal/30 rounded-lg focus:ring-gold focus:border-gold bg-white/50">
                            <option value="">Desde</option>
                        </select>
                        <select id="filtroAnioHasta"
                            class="w-full p-2 border border-teal/30 rounded-lg focus:ring-gold focus:border-gold bg-white/50">
                            <option value="">Hasta</option>
                        </select>
                    </div>
                </div>
                <div>
                    <label class="block text-sm font-medium text-dark mb-1">Entidad</label>
                    <select id="filtroEntidad"
                        class="w-full p-2 border border-teal/30 rounded-lg focus:ring-gold focus:border-gold bg-white/50">
                        <option value="">Todas las entidades</option>
                    </select>
                </div>
                <div>
                    <label class="block text-sm font-medium text-dark mb-1">Estado</label>
                    <select id="filtroEstado"
                        class="w-full p-2 border border-teal/30 rounded-lg focus:ring-gold focus:border-gold bg-white/50">
                        <option value="">Todos los estados</option>
                    </select>
                </div>
                <div>
                    <label class="block text-sm font-medium text-dark mb-1">Relevancia</label>
                    <select id="filtroRiesgo"
                        class="w-full p-2 border border-teal/30 rounded-lg focus:ring-gold focus:border-gold bg-white/50">
                        <option value="">Todas las relevancias</option>
                    </select>
                </div>
                <div>
                    <label class="block text-sm font-medium text-dark mb-1">Código Contable</label>
                    <select id="filtroCodContable"
                        class="w-full p-2 border border-teal/30 rounded-lg focus:ring-gold focus:border-gold bg-white/50">
                        <option value="">Todos los códigos</option>
                        <!-- Las opciones se llenarán dinámicamente -->
                    </select>
                </div>
                <div class="flex items-end">
                    <button id="aplicarFiltros"
                        class="w-full bg-teal hover:bg-dark text-white font-medium py-2 px-4 rounded-lg transition-all hover:shadow-lg flex items-center justify-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" viewBox="0 0 20 20"
                            fill="currentColor">
                            <path fill-rule="evenodd"
                                d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z"
                                clip-rule="evenodd" />
                        </svg>
                        Aplicar
                    </button>
                </div>
                <div class="flex items-end">
                    <button id="eliminarFiltros"
                        class="w-full bg-gold hover:bg-dark text-white font-medium py-2 px-4 rounded-lg transition-all hover:shadow-lg flex items-center justify-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" viewBox="0 0 20 20"
                            fill="currentColor">
                            <path fill-rule="evenodd"
                                d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
                                clip-rule="evenodd" />
                        </svg>
                        Eliminar Filtros
                    </button>
                </div>
            </div>
        </div>

        <!-- Información general -->
        <div class="gap-6 mb-8" id="infoGeneralCod">
            <!-- Los totales se actualizarán dinámicamente aquí -->
        </div>

        <!-- Resumen de Totales -->
        <div class="gap-6 mb-8" id="totalesContainer">
            <!-- Los totales se actualizarán dinámicamente aquí -->
        </div>

        <!-- Gráficos -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
            <!-- Gráfico de Entidades -->
            <div class="bg-white/80 backdrop-blur-sm rounded-xl shadow-lg border border-teal/20 p-6">
                <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-3 mb-4">
                    <h2 class="text-xl font-semibold text-dark flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-teal" viewBox="0 0 20 20"
                            fill="currentColor">
                            <path
                                d="M2 11a1 1 0 011-1h2a1 1 0 011 1v5a1 1 0 01-1 1H3a1 1 0 01-1-1v-5zM8 7a1 1 0 011-1h2a1 1 0 011 1v9a1 1 0 01-1 1H9a1 1 0 01-1-1V7zM14 4a1 1 0 011-1h2a1 1 0 011 1v12a1 1 0 01-1 1h-2a1 1 0 01-1-1V4z" />
                        </svg>
                        Gráfico por Entidad
                    </h2>
                    <div class="flex gap-2">
                        <select id="tipoGraficoEntidades"
                            class="bg-white/50 border border-teal/30 rounded-lg px-3 py-1 text-sm focus:ring-gold focus:border-gold">
                            <option value="bar">Barras</option>
                            <option value="pie">Pastel</option>
                            <option value="doughnut">Dona</option>
                        </select>
                        <select id="metricaEntidades"
                            class="bg-white/50 border border-teal/30 rounded-lg px-3 py-1 text-sm focus:ring-gold focus:border-gold">
                            <option value="cantidad">Cantidad de contratos</option>
                            <option value="estados">Distribución por estados</option>
                            <option value="valor">Valor total</option>
                            <option value="relevancia">Relevancia</option>
                        </select>
                    </div>
                </div>
                <canvas id="graficoEntidades" height="300"></canvas>
            </div>

            <!-- Gráfico Anual -->
            <div class="bg-white/80 backdrop-blur-sm rounded-xl shadow-lg border border-teal/20 p-6">
                <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-3 mb-4">
                    <h2 class="text-xl font-semibold text-dark flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-teal" viewBox="0 0 20 20"
                            fill="currentColor">
                            <path fill-rule="evenodd"
                                d="M3 3a1 1 0 000 2v8a2 2 0 002 2h2.586l-1.293 1.293a1 1 0 101.414 1.414L10 15.414l2.293 2.293a1 1 0 001.414-1.414L12.414 15H15a2 2 0 002-2V5a1 1 0 100-2H3zm11.707 4.707a1 1 0 00-1.414-1.414L10 9.586 8.707 8.293a1 1 0 00-1.414 0l-2 2a1 1 0 101.414 1.414L8 10.414l1.293 1.293a1 1 0 001.414 0l4-4z"
                                clip-rule="evenodd" />
                        </svg>
                        Evolución Temporal
                    </h2>
                    <div class="flex gap-2">
                        <select id="tipoGraficoAnual"
                            class="bg-white/50 border border-teal/30 rounded-lg px-3 py-1 text-sm focus:ring-gold focus:border-gold">
                            <option value="line">Líneas</option>
                            <option value="bar">Barras</option>
                        </select>
                        <select id="metricaAnual"
                            class="bg-white/50 border border-teal/30 rounded-lg px-3 py-1 text-sm focus:ring-gold focus:border-gold">
                            <option value="valor">Valor total</option>
                            <option value="beneficio">Beneficio</option>
                            <option value="contratos">Cantidad de contratos</option>
                        </select>
                    </div>
                </div>
                <canvas id="graficoAnual" height="300"></canvas>
            </div>
        </div>
        <!-- Tabla de Detalles -->

        <div class="mb-4 bg-white/80 backdrop-blur-sm rounded-xl shadow-lg border border-teal/20 p-4">
            <h3 class="text-sm font-semibold text-dark mb-2 flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1 text-teal" viewBox="0 0 20 20"
                    fill="currentColor">
                    <path fill-rule="evenodd"
                        d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2h-1V9z"
                        clip-rule="evenodd" />
                </svg>
                Leyenda de Niveles de Relevancia
            </h3>
            <div class="flex flex-wrap gap-3">
                <!-- Cada item con tooltip -->
                <div class="group relative flex items-center px-2 py-1 rounded bg-blue-50">
                    <div class="w-3 h-3 rounded-full bg-blue-100 border border-blue-300 mr-2"></div>
                    <span class="text-xs">1-2</span>
                    <div
                        class="absolute bottom-full mb-2 hidden group-hover:block bg-white p-2 rounded shadow-lg text-xs w-40 border border-gray-200">
                        Peligro Mínimo - Impacto insignificante
                    </div>
                </div>

                <div class="group relative flex items-center px-2 py-1 rounded bg-green-50">
                    <div class="w-3 h-3 rounded-full bg-green-100 border border-green-300 mr-2"></div>
                    <span class="text-xs">3</span>
                    <div
                        class="absolute bottom-full mb-2 hidden group-hover:block bg-white p-2 rounded shadow-lg text-xs w-40 border border-gray-200">
                        Peligro Bajo - Impacto menor
                    </div>
                </div>

                <div class="group relative flex items-center px-2 py-1 rounded bg-yellow-50">
                    <div class="w-3 h-3 rounded-full bg-yellow-100 border border-yellow-300 mr-2"></div>
                    <span class="text-xs">4-6</span>
                    <div
                        class="absolute bottom-full mb-2 hidden group-hover:block bg-white p-2 rounded shadow-lg text-xs w-40 border border-gray-200">
                        Peligro Moderado - Impacto significativo
                    </div>
                </div>

                <div class="group relative flex items-center px-2 py-1 rounded bg-orange-50">
                    <div class="w-3 h-3 rounded-full bg-orange-200 border border-orange-300 mr-2"></div>
                    <span class="text-xs">7-9</span>
                    <div
                        class="absolute bottom-full mb-2 hidden group-hover:block bg-white p-2 rounded shadow-lg text-xs w-40 border border-gray-200">
                        Peligro Alto - Impacto grave
                    </div>
                </div>

                <div class="group relative flex items-center px-2 py-1 rounded bg-red-50">
                    <div class="w-3 h-3 rounded-full bg-red-500 border border-red-600 mr-2"></div>
                    <span class="text-xs">10</span>
                    <div
                        class="absolute bottom-full mb-2 hidden group-hover:block bg-white p-2 rounded shadow-lg text-xs w-40 border border-gray-200">
                        Peligro Máximo - Impacto crítico
                    </div>
                </div>
            </div>
        </div>
        <div class="bg-white/80 backdrop-blur-sm rounded-xl shadow-lg border border-teal/20 overflow-hidden mb-8">
            <div class="bg-dark px-6 py-4 flex justify-between items-center">
                <h2 class="text-xl font-bold text-gold flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20"
                        fill="currentColor">
                        <path fill-rule="evenodd"
                            d="M5 4a1 1 0 00-1 1v14a1 1 0 001 1h10a1 1 0 001-1V5a1 1 0 00-1-1H5zm2 6a1 1 0 011-1h4a1 1 0 110 2H8a1 1 0 01-1-1zm1 3a1 1 0 100 2h4a1 1 0 100-2H8z"
                            clip-rule="evenodd" />
                    </svg>
                    Detalle de Proyectos
                </h2>
                <div class="text-sm text-gold font-semibold" id="contadorProyectos">
                    Mostrando 0 proyectos
                </div>
            </div>
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-teal/20" id="tablaProyectos">
                    <thead class="bg-teal/10">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-dark uppercase tracking-wider">Año
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-dark uppercase tracking-wider">
                                Entidad</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-dark uppercase tracking-wider">
                                Relevancia</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-dark uppercase tracking-wider">
                                Estado</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-dark uppercase tracking-wider">Valor
                                Total</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-dark uppercase tracking-wider">
                                Beneficio</th>
                        </tr>
                    </thead>
                    <tbody class="divide-y divide-teal/20" id="cuerpoTabla">
                        <!-- Los datos se cargarán dinámicamente aquí -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <script>

        // Parsear los datos del backend de Ingresos
        const DataIngresos = JSON.parse('<%- ingresos %>');

        // Parsear los datos del backend de Financiera GIROS
        const DataFinanciera = JSON.parse('<%- financiera %>');

        // Parsear los datos del backend de PMO
        const datosBackend = JSON.parse('<%- datos %>');
        const proyectos = datosBackend.proyectos;
        const entidades = datosBackend.entidades;
        const años = datosBackend.años;
        const codContable = datosBackend.codContable;

        // Obtener todos los estados únicos de los proyectos
        const estadosUnicos = [...new Set(proyectos.map(p => p.estado).filter(Boolean))].sort();
        const riesgosUnicos = [...new Set(proyectos.map(p => p.relevancia).filter(Boolean))].sort((a, b) => a - b);
        const codigosPMO = [...new Set(proyectos.map(p => p.codContable).filter(Boolean))].sort();

        // Función para calcular totales filtrados
        function calcularTotalesFiltrados(proyectosFiltrados) {
            const totales = proyectosFiltrados.reduce((acc, item) => {
                return {
                    aporteEntidad: acc.aporteEntidad + (item.aporteEntidad || 0),
                    adicionAporte: acc.adicionAporte + (item.adicionAporte || 0),
                    contrapartida: acc.contrapartida + (item.contrapartida || 0),
                    adicionContrapartida: acc.adicionContrapartida + (item.adicionContrapartida || 0),
                    valorTotal: acc.valorTotal + (item.valorTotal || 0),
                    beneficio: acc.beneficio + (item.beneficio || 0),
                    cantidadProyectos: proyectosFiltrados.length, // Total de proyectos filtrados
                };
            }, {
                aporteEntidad: 0,
                adicionAporte: 0,
                contrapartida: 0,
                adicionContrapartida: 0,
                valorTotal: 0,
                beneficio: 0,
                cantidadProyectos: 0
            });

            // Calcular distribución por nivel de riesgo
            const distribucionRiesgo = proyectosFiltrados.reduce((acc, proyecto) => {
                const nivel = proyecto.relevancia || 'sin_relevancia';
                acc[nivel] = (acc[nivel] || 0) + 1;
                return acc;
            }, {});

            return {
                ...totales,
                distribucionRiesgo
            };
        }

        // Función para actualizar los totales en el UI
        function actualizarTotales(totales, totalesFinanciera, totalesIngresos) {
            const hasFinancieraData = totalesFinanciera && totalesFinanciera.valorTotalGirar !== undefined;
            const totalesContainer = document.getElementById('totalesContainer');
            totalesContainer.innerHTML = `

            <div class="relative my-10">
                <div class="absolute inset-0 flex items-center" aria-hidden="true">
                    <div class="w-full border-t border-teal/20"></div>
                </div>
                <div class="relative flex justify-center">
                    <span class="bg-white px-6 py-2 rounded-lg shadow-sm border border-teal/20">
                    <i class="fas fa-chart-pie text-teal mr-2"></i>
                    <span class="text-lg font-medium text-[#35251f]">Indicadores Principales</span>
                    </span>
                </div>
            </div>
            

            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">

                <div class="bg-white rounded-lg shadow-md shadow-[#35251f] p-6">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-[#35251f] text-sm font-medium">TOTAL DE PROYECTOS</p>
                            <p class="text-2xl font-bold text-[#35251f]">${totales.cantidadProyectos}</p>
                        </div>
                        <div class="bg-blue-100 p-3 rounded-full">
                            <i class="fas fa-building text-blue-500"></i>
                        </div>
                    </div>
                </div>


                <div class="bg-white rounded-lg shadow-md shadow-[#35251f] p-6">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-[#35251f] text-sm font-medium">VALOR TOTAL DE INGRESOS PROYECTADO.</p>
                            <p class="text-2xl font-bold text-[#35251f]">${formatCurrency(totales.valorTotal - totales.contrapartida)}</p>
                        </div>
                        <div class="bg-red-100 p-3 rounded-full">
                            <i class="fas fa-chart-line text-red-500"></i>
                        </div>
                    </div>
                </div>

                <div class="bg-white rounded-lg shadow-md shadow-[#35251f] p-6">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-[#35251f] text-sm font-medium">VALOR PENDIENTE POR COBRAR</p>
                        <p class="text-2xl font-bold text-[#35251f]">${formatCurrency(totales.valorTotal - totalesIngresos.totalIngresos)}</p>
                    </div>
                    <div class="bg-green-100 p-3 rounded-full">
                        <i class="fas fa-coins text-green-500"></i>
                    </div>
                </div>
            </div>
            
            <div class="bg-white rounded-lg shadow-md shadow-[#35251f] p-6">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-[#35251f] text-sm font-medium">VALOR EN CAJA</p>
                        <p class="text-2xl font-bold text-[#35251f]">${formatCurrency(totalesIngresos.totalIngresos - totalesFinanciera.valorTotalGirar)}</p>
                    </div>
                    <div class="bg-green-100 p-3 rounded-full">
                        <i class="fas fa-money-bill-wave text-green-500"></i>
                    </div>
                </div>
            </div>
                
            </div>







            <!-- Botón para Indicadores PMO -->
            <div class="relative my-10">
                <div class="absolute inset-0 flex items-center" aria-hidden="true">
                    <div class="w-full border-t border-teal/20"></div>
                </div>
                <button id="togglePmo" class="relative flex justify-center mx-auto bg-white px-6 py-2 rounded-lg shadow-sm border border-teal/20 hover:bg-teal/10 transition-colors cursor-pointer">
                    <i class="fas fa-chart-pie text-teal mr-2"></i>
                    <span class="text-lg font-medium text-[#35251f]">Indicadores PMO</span>
                    <i id="pmoIcon" class="fas fa-chevron-down ml-2 text-teal"></i>
                </button>
            </div>

            <div id="pmoSection" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">

                <div class="bg-white rounded-lg shadow-md shadow-[#35251f] p-6">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-[#35251f] text-sm font-medium">VALOR TOTAL PROYECTOS.</p>
                            <p class="text-2xl font-bold text-[#35251f]">${formatCurrency(totales.valorTotal)}</p>
                        </div>
                        <div class="bg-red-100 p-3 rounded-full">
                            <i class="fas fa-chart-line text-red-500"></i>
                        </div>
                    </div>
                </div>


                <div class="bg-white rounded-lg shadow-md shadow-[#35251f] p-6">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-[#35251f] text-sm font-medium">APORTE ENTIDAD</p>
                            <p class="text-2xl font-bold text-[#35251f]">${formatCurrency(totales.aporteEntidad)}</p>
                        </div>
                        <div class="bg-blue-100 p-3 rounded-full">
                            <i class="fas fa-building text-blue-500"></i>
                        </div>
                    </div>
                </div>

                <div class="bg-white rounded-lg shadow-md shadow-[#35251f] p-6">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-[#35251f] text-sm font-medium">ADICIÓN APORTE 2025</p>
                            <p class="text-2xl font-bold text-[#35251f]">${formatCurrency(totales.adicionAporte)}</p>
                        </div>
                        <div class="bg-green-100 p-3 rounded-full">
                            <i class="fas fa-plus-circle text-green-500"></i>
                        </div>
                    </div>
                </div>

                <div class="bg-white rounded-lg shadow-md shadow-[#35251f] p-6">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-[#35251f] text-sm font-medium">CONTRAPARTIDA</p>
                            <p class="text-2xl font-bold text-[#35251f]">${formatCurrency(totales.contrapartida)}</p>
                        </div>
                        <div class="bg-purple-100 p-3 rounded-full">
                            <i class="fas fa-handshake text-purple-500"></i>
                        </div>
                    </div>
                </div>

                <div class="bg-white rounded-lg shadow-md shadow-[#35251f] p-6">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-[#35251f] text-sm font-medium">ADICIÓN CONTRAPARTIDA. 2025</p>
                            <p class="text-2xl font-bold text-[#35251f]">${formatCurrency(totales.adicionContrapartida)}</p>
                        </div>
                        <div class="bg-yellow-100 p-3 rounded-full">
                            <i class="fas fa-plus text-yellow-500"></i>
                        </div>
                    </div>
                </div>

                <div class="bg-white rounded-lg shadow-md shadow-[#35251f] p-6">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-[#35251f] text-sm font-medium">BENEFICIO INSTITUCIONAL.</p>
                            <p class="text-2xl font-bold text-[#35251f]">${formatCurrency(totales.beneficio)}</p>
                        </div>
                        <div class="bg-indigo-100 p-3 rounded-full">
                            <i class="fas fa-coins text-indigo-500"></i>
                        </div>
                    </div>
                </div>
                
            </div>


            <!-- Botón para Indicadores Financieros -->
            <div class="relative my-10">
                <div class="absolute inset-0 flex items-center" aria-hidden="true">
                    <div class="w-full border-t border-teal/20"></div>
                </div>
                <button id="toggleFinancieros" class="relative flex justify-center mx-auto bg-white px-6 py-2 rounded-lg shadow-sm border border-teal/20 hover:bg-teal/10 transition-colors cursor-pointer">
                    <i class="fas fa-chart-pie text-teal mr-2"></i>
                    <span class="text-lg font-medium text-[#35251f]">Indicadores Financieros</span>
                    <i id="financierosIcon" class="fas fa-chevron-down ml-2 text-teal"></i>
                </button>
            </div>

            

            <div id="financierosSection" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-6 mb-8">

                <div class="bg-white rounded-lg shadow-md shadow-[#35251f] p-6">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-[#35251f] text-sm font-medium">CANTIDAD DE INGRESOS</p>
                            <p class="text-2xl font-bold text-[#35251f]">${totalesIngresos.totalRegistros}</p>
                        </div>
                        <div class="bg-indigo-100 p-3 rounded-full">
                            <i class="fas fa-coins text-indigo-500"></i>
                        </div>
                    </div>
                </div>

                <div class="bg-white rounded-lg shadow-md shadow-[#35251f] p-6">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-[#35251f] text-sm font-medium">TOTAL INGRESOS</p>
                            <p class="text-2xl font-bold text-[#35251f]">${formatCurrency(totalesIngresos.totalIngresos)}</p>
                        </div>
                        <div class="bg-indigo-100 p-3 rounded-full">
                            <i class="fas fa-coins text-indigo-500"></i>
                        </div>
                    </div>
                </div>

            
            <div class="bg-white rounded-lg shadow-md shadow-[#35251f] p-6">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-[#35251f] text-sm font-medium">CANTIDAD DE GIROS</p>
                        <p class="text-2xl font-bold text-[#35251f]">${totalesFinanciera.cantidadTotal}</p>
                    </div>
                    <div class="bg-green-100 p-3 rounded-full">
                        <i class="fas fa-coins text-green-500"></i>
                    </div>
                </div>
            </div>

            <div class="bg-white rounded-lg shadow-md shadow-[#35251f] p-6">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-[#35251f] text-sm font-medium">TOTAL GIRADO</p>
                        <p class="text-2xl font-bold text-[#35251f]">${formatCurrency(totalesFinanciera.valorTotalGirar)}</p>
                    </div>
                    <div class="bg-green-100 p-3 rounded-full">
                        <i class="fas fa-coins text-green-500"></i>
                    </div>
                </div>
            </div>
                
            </div>

           


        `;
        }

        // Función para aplicar filtros
        function aplicarFiltros() {
            const anioDesde = document.getElementById('filtroAnioDesde').value;
            const anioHasta = document.getElementById('filtroAnioHasta').value;
            const entidadSeleccionada = document.getElementById('filtroEntidad').value;
            const estadoSeleccionado = document.getElementById('filtroEstado').value;
            const riesgoSeleccionado = document.getElementById('filtroRiesgo').value;
            const codContableSeleccionado = document.getElementById('filtroCodContable').value;

            // Validar el rango de años
            if (anioDesde && anioHasta && parseInt(anioDesde) > parseInt(anioHasta)) {
                alert('El año "Desde" no puede ser mayor que el año "Hasta"');
                return;
            }

            // Filtrar proyectos PMO
            const proyectosFiltrados = proyectos.filter(proyecto => {
                // Validar rango de años
                const cumpleAnio = (
                    (!anioDesde && !anioHasta) || // Sin filtro
                    (anioDesde && !anioHasta && proyecto.anio >= anioDesde) || // Solo desde
                    (!anioDesde && anioHasta && proyecto.anio <= anioHasta) || // Solo hasta
                    (anioDesde && anioHasta && proyecto.anio >= anioDesde && proyecto.anio <= anioHasta) // Rango completo
                );

                const cumpleEntidad = !entidadSeleccionada || proyecto.entidad == entidadSeleccionada;
                const cumpleEstado = !estadoSeleccionado || proyecto.estado == estadoSeleccionado;
                const cumpleRiesgo = !riesgoSeleccionado || proyecto.relevancia == riesgoSeleccionado;
                const cumpleCodContable = !codContableSeleccionado || proyecto.codContable == codContableSeleccionado;

                return cumpleAnio && cumpleEntidad && cumpleEstado && cumpleRiesgo && cumpleCodContable;
            });

            console.log("PMO filtrado",proyectosFiltrados);

            const codFiltrado = proyectosFiltrados.map(codContable => {
                if (codContable !== undefined){
                    return codContable.codContable;
                } else {
                    return undefined;
                }
            }).filter(element => element !== undefined);

            console.log("CodContable filtrado",codFiltrado);


            // Obtener códigos contables únicos de proyectos filtrados
            // const codigosFiltrados = [...new Set(proyectosFiltrados.map(proyecto => proyecto.codContable).filter(Boolean))];
            // console.log("Códigos contables filtrados:", codigosFiltrados);

            const financieraFiltrada = {
                resultado: DataFinanciera.resultado.filter(item => {
                    return !codContableSeleccionado || item.codContableFinanciera == codContableSeleccionado;
                }),
                totalesGenerales: {
                    totalCuentas: DataIngresos.resultado.filter(item => {
                        return !codContableSeleccionado || item.codContableFinanciera == codContableSeleccionado;
                    }).length,
                    valorTotalGirar: DataFinanciera.resultado
                        .filter(item => !codContableSeleccionado || item.codContableFinanciera == codContableSeleccionado)
                        .reduce((acc, item) => acc + item.sumaValorGiro, 0),
                    cantidadTotal: DataFinanciera.resultado
                        .filter(item => !codContableSeleccionado || item.codContableFinanciera == codContableSeleccionado)
                        .reduce((acc, item) => acc + item.vecesAparece, 0)
                }
            };

            // Filtrar datos de Ingresos
            const ingresosFiltrados = {
                resultado: DataIngresos.resultado.filter(item => {
                    return !codContableSeleccionado || item.cuentaContable == codContableSeleccionado;
                }),
                totalesGenerales: {
                    totalCuentas: DataIngresos.resultado.filter(item => {
                        return !codContableSeleccionado || item.cuentaContable == codContableSeleccionado;
                    }).length,
                    totalIngresos: DataIngresos.resultado
                        .filter(item => !codContableSeleccionado || item.cuentaContable == codContableSeleccionado)
                        .reduce((acc, item) => acc + item.valorTotal, 0),
                    totalRegistros: DataIngresos.resultado
                        .filter(item => !codContableSeleccionado || item.cuentaContable == codContableSeleccionado)
                        .reduce((acc, item) => acc + item.cantidad, 0)
                }
            };

            // Actualizar contador
            document.getElementById('contadorProyectos').textContent = `Mostrando ${proyectosFiltrados.length} proyectos`;
            // Actualizar tabla
            const cuerpoTabla = document.getElementById('cuerpoTabla');
            cuerpoTabla.innerHTML = proyectosFiltrados.map(proyecto => {
                // Determinar clase CSS según el estado
                let estadoClass = 'bg-gray-100 text-gray-800'; // Por defecto
                let estadoRiesgo = "hover:bg-gray-50 odd:bg-[#15beaf0d] odd:dark:bg-[#15beaf0d]";

                const estadoTexto = proyecto.estado || 'N/A';
                const estadoRiesgoTexto = proyecto.relevancia || 'N/A';

                switch (estadoTexto) {
                    case 'FINALIZADO':
                        estadoClass = 'bg-green-100 text-green-800';
                        break;
                    case 'SUSPENDIDO':
                        estadoClass = 'bg-red-100 text-red-800';
                        break;
                    case 'EN EJECUCIÓN':
                        estadoClass = 'bg-blue-100 text-blue-800';
                        break;
                    case 'LIQUIDADO':
                        estadoClass = 'bg-purple-100 text-purple-800';
                        break;
                    default:
                        break;
                }

                switch (estadoRiesgoTexto) {
                    case 1: // Mínimo peligro - AZUL
                        estadoRiesgo = "bg-blue-100 text-blue-800"; // Azul claro
                        break;
                    case 2: // Bajo peligro - VERDE
                        estadoRiesgo = "bg-green-100 text-green-800"; // Verde claro
                        break;
                    case 3:
                        estadoRiesgo = "bg-green-200 text-green-900"; // Verde medio
                        break;
                    case 4: // Moderado peligro - AMARILLO
                        estadoRiesgo = "bg-yellow-100 text-yellow-800"; // Amarillo claro
                        break;
                    case 5:
                        estadoRiesgo = "bg-yellow-200 text-yellow-900"; // Amarillo medio
                        break;
                    case 6:
                        estadoRiesgo = "bg-amber-200 text-amber-900"; // Amarillo oscuro/ámbar
                        break;
                    case 7: // Alto peligro - NARANJA
                        estadoRiesgo = "bg-orange-200 text-orange-900"; // Naranja claro
                        break;
                    case 8:
                        estadoRiesgo = "bg-orange-300 text-white"; // Naranja medio
                        break;
                    case 9:
                        estadoRiesgo = "bg-orange-400 text-white"; // Naranja oscuro
                        break;
                    case 10: // Máximo peligro - ROJO
                        estadoRiesgo = "bg-red-500 text-white"; // Rojo intenso
                        break;
                    default:
                        estadoRiesgo = "bg-gray-100 text-gray-800"; // Gris para valores no definidos
                }

                return `
        <tr class="${estadoRiesgo}">
                <td class="px-6 py-4 whitespace-nowrap text-sm text-#35251f">${proyecto.anio || 'N/A'}</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-#35251f">${proyecto.entidad || 'N/A'}</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-#35251f">${proyecto.relevancia || 'N/A'}</td>
                <td class="px-6 py-4 whitespace-nowrap">
                    <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${estadoClass}">
                        ${estadoTexto}
                    </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-#35251f">${formatCurrency(proyecto.valorTotal)}</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-#35251f">${formatCurrency(proyecto.beneficio)}</td>
            </tr>
            `;
            }).join('');

            // Calcular y actualizar totales
            const totalesFiltradosPMO = calcularTotalesFiltrados(proyectosFiltrados);
            actualizarTotales(totalesFiltradosPMO, financieraFiltrada.totalesGenerales, ingresosFiltrados.totalesGenerales);
            // Actualizar gráficos
            actualizarGraficos(proyectosFiltrados);
        }



        function eliminarFiltros() {
            // Resetear todos los selectores de filtro
            document.getElementById('filtroAnioDesde').value = '';
            document.getElementById('filtroAnioHasta').value = '';
            document.getElementById('filtroEntidad').value = '';
            document.getElementById('filtroEstado').value = '';
            document.getElementById('filtroRiesgo').value = '';
            document.getElementById('filtroCodContable').value = '';

            // Resetear selectores de gráficos a valores por defecto
            document.getElementById('tipoGraficoEntidades').value = 'bar';
            document.getElementById('metricaEntidades').value = 'cantidad';
            document.getElementById('tipoGraficoAnual').value = 'line';
            document.getElementById('metricaAnual').value = 'valor';

            // Aplicar los filtros (que ahora estarán vacíos)
            aplicarFiltros();
        }

        // Inicializar gráficos
        // Variables globales para los gráficos
        let graficoEntidades, graficoAnual;

        function procesarMetricas(proyectosFiltrados, tipoMetrica, agrupador) {
            switch (tipoMetrica) {
                case 'cantidad':
                    return proyectosFiltrados.reduce((acc, proyecto) => {
                        const key = proyecto[agrupador];
                        if (!key) return acc;
                        acc[key] = (acc[key] || 0) + 1;
                        return acc;
                    }, {});

                case 'estados':
                    return proyectosFiltrados.reduce((acc, proyecto) => {
                        const key = proyecto.estado || 'Sin estado';
                        if (!proyecto[agrupador]) return acc;
                        acc[key] = (acc[key] || 0) + 1;
                        return acc;
                    }, {});

                case 'valor':
                    return proyectosFiltrados.reduce((acc, proyecto) => {
                        const key = proyecto[agrupador];
                        if (!key) return acc;
                        acc[key] = (acc[key] || 0) + (proyecto.valorTotal || 0);
                        return acc;
                    }, {});

                case 'beneficio':
                    return proyectosFiltrados.reduce((acc, proyecto) => {
                        const key = proyecto[agrupador];
                        if (!key) return acc;
                        acc[key] = (acc[key] || 0) + (proyecto.beneficio || 0);
                        return acc;
                    }, {});

                case 'contratos':
                    return proyectosFiltrados.reduce((acc, proyecto) => {
                        const key = proyecto[agrupador];
                        if (!key) return acc;
                        acc[key] = (acc[key] || 0) + 1;
                        return acc;
                    }, {});

                case 'relevancia':
                    return proyectosFiltrados.reduce((acc, proyecto) => {
                        const key = proyecto.relevancia || 'Sin relevancia';
                        if (!proyecto[agrupador]) return acc;
                        acc[key] = (acc[key] || 0) + 1;
                        return acc;
                    }, {});

                default:
                    return {};
            }
        }





        // Función para actualizar gráficos
        function actualizarGraficos(proyectosFiltrados) {
            // Obtener configuraciones seleccionadas de los gráficos
            const config = {
                entidades: {
                    tipo: document.getElementById('tipoGraficoEntidades').value,
                    metrica: document.getElementById('metricaEntidades').value
                },
                anual: {
                    tipo: document.getElementById('tipoGraficoAnual').value,
                    metrica: document.getElementById('metricaAnual').value
                }
            };

            // Procesar datos según métricas seleccionadas
            const datosEntidades = procesarMetricas(proyectosFiltrados, config.entidades.metrica, 'entidad');
            const datosAnuales = procesarMetricas(proyectosFiltrados, config.anual.metrica, 'anio');

            // Destruir gráficos existentes
            if (graficoEntidades) graficoEntidades.destroy();
            if (graficoAnual) graficoAnual.destroy();

            // Crear nuevos gráficos
            if (Object.keys(datosEntidades).length > 0) {
                const labels = Object.keys(datosEntidades).sort((a, b) => datosEntidades[b] - datosEntidades[a]);
                const titulo = getTituloMetrica(config.entidades.metrica);

                graficoEntidades = crearGrafico(
                    document.getElementById('graficoEntidades'),
                    config.entidades.tipo,
                    labels,
                    labels.map(label => datosEntidades[label]),
                    titulo,
                    config.entidades.metrica
                );
            }

            if (Object.keys(datosAnuales).length > 0) {
                const labels = Object.keys(datosAnuales).sort();
                const titulo = getTituloMetrica(config.anual.metrica);

                graficoAnual = crearGrafico(
                    document.getElementById('graficoAnual'),
                    config.anual.tipo,
                    labels,
                    labels.map(label => datosAnuales[label]),
                    titulo,
                    config.anual.metrica
                );
            }
        }


        // Inicialización
        document.addEventListener('DOMContentLoaded', () => {
            // Inicializar filtros
            inicializarFiltros(["filtroAnioDesde", "filtroAnioHasta", "filtroEntidad", "filtroEstado", "filtroRiesgo", "filtroCodContable"], [años, años, entidades, estadosUnicos, riesgosUnicos, codigosPMO])

            
            // Mostrar todos los datos inicialmente
            aplicarFiltros();
        });

        // Event listeners para los selectores
        document.getElementById('aplicarFiltros').addEventListener('click', aplicarFiltros);
        document.getElementById('tipoGraficoEntidades').addEventListener('change', aplicarFiltros);
        document.getElementById('tipoGraficoAnual').addEventListener('change', aplicarFiltros);
        document.getElementById('metricaEntidades').addEventListener('change', aplicarFiltros);
        document.getElementById('metricaAnual').addEventListener('change', aplicarFiltros);
        document.getElementById('eliminarFiltros').addEventListener('click', eliminarFiltros);

    </script>


<script>
document.addEventListener('DOMContentLoaded', function() {
    // Toggle para sección PMO
    const togglePmo = document.getElementById('togglePmo');
    const pmoSection = document.getElementById('pmoSection');
    const pmoIcon = document.getElementById('pmoIcon');
    
    // Toggle para sección Financieros
    const toggleFinancieros = document.getElementById('toggleFinancieros');
    const financierosSection = document.getElementById('financierosSection');
    const financierosIcon = document.getElementById('financierosIcon');
    
    // Funcionalidad para PMO
    togglePmo.addEventListener('click', function() {
        pmoSection.classList.toggle('hidden');
        pmoIcon.classList.toggle('fa-chevron-down');
        pmoIcon.classList.toggle('fa-chevron-up');
    });
    
    // Funcionalidad para Financieros
    toggleFinancieros.addEventListener('click', function() {
        financierosSection.classList.toggle('hidden');
        financierosIcon.classList.toggle('fa-chevron-down');
        financierosIcon.classList.toggle('fa-chevron-up');
    });
    
    // Opcional: Ocultar ambas secciones al cargar la página
    pmoSection.classList.add('hidden');
    financierosSection.classList.add('hidden');
});
</script>



<!-- Script para manejar la información del proyecto según el código contable -->
<script>
  const select = document.getElementById("filtroCodContable");
  const contenedor = document.getElementById("infoGeneralCod");
  const data = datosBackend.proyectos;


  select.addEventListener('change', () => {

    const datafilter = data.filter(item => item.codContable === parseInt(select.value));

    if (select.value) { 
      contenedor.style.display = "block"; 
      contenedor.innerHTML = `      
            <div class="grid grid-cols-1 md:grid-cols-1 lg:grid-cols-2 gap-6 mb-8">

                <div class="bg-white rounded-lg shadow-md shadow-[#35251f] p-6">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-[#35251f] text-sm font-medium">Entidad del proyecto</p>
                            <p class="text-2xl font-bold text-[#35251f]">${datafilter[0].entidad}</p>
                        </div>
                        <div class="bg-blue-100 p-3 rounded-full">
                            <i class="fas fa-building text-blue-500"></i>
                        </div>
                    </div>
                </div>


                <div class="bg-white rounded-lg shadow-md shadow-[#35251f] p-6">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-[#35251f] text-sm font-medium">Codigo contable del proyecto.</p>
                            <p class="text-2xl font-bold text-[#35251f]">${datafilter[0].codContable}</p>
                        </div>
                        <div class="bg-red-100 p-3 rounded-full">
                            <i class="fas fa-chart-line text-red-500"></i>
                        </div>
                    </div>
                </div>
            
                
            </div>
      
      
      
      
      
      
      
      `;
    } else {
      contenedor.style.display = "none";
      contenedor.innerHTML = ""; 
    }
  });
</script>

</body>

</html>